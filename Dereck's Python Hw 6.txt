INSTRUCTIONS:
	•  You MUST test your code with a Python Interpreter using one of the 3 methods
           specified in the Course Policy document.  Your output MUST match the output
           as shown below.

	•  Each question is worth 2.5 points each.  Reference the Python decks posted
	   on Moodle as needed.  Read instructions carefully!

	•  You MUST do your own work!  Consequences for plagiarism are documented
	   in class policy document.

========================================================================================

1.  Write python code for the below instructions (don’t forget to use the keyword “self” where appropriate in your code):

    A.	Define a Class called Car

    B.	Inside your Car class, define a new member variable named condition and give it an initial value of "New".

    C.	Define the constructor to take the following inputs: model, color, and MPG. Assign these inputs to member variables of the same name.

    D.	Below your Car class, create a new object named my_car that is an instance of Car, passing the following as inputs to the new object: model = “Corvette”, color = “Black”,  and MPG = “30”.

    E.	At the end of your code, use a print statement to display the model of my_car, the color of my_car, the MPG of my_car, and the condition of my_car.  Your output should duplicate what is shown below.


CODE
class Car:
    # condition = "New" # class attribute
    def __init__(self, model, color, MPG):
        self.model = model  # instance variables (member variables)
        self.color = color
        self.MPG = MPG
        self.condition = "New"

my_car = Car("Corvette", "Black", 30)
print("Car Model:",my_car.model)
print("Car Color:", my_car.color)
print("Car Miles Per Gallon:", my_car.MPG)
print("Car Condition:", my_car.condition)

OUTPUT
Car Model: Corvette
Car Color: Black
Car Miles Per Gallon: 30
Car Condition: New





2.  Write python code for the below instructions (don’t forget to use the keyword “self” where appropriate in your code):

    A.  Define a Parent Class called Person

        a.  Inside your Person class, define new member variables called name, age, and gender.   Initialize these variables accordingly.

        b.  Define the constructor to take the following inputs: name, age, and gender.   Assign these inputs to member variables of the same name.


    B.  Define Child Class called Employee that inherits from the Person Class

        a.  Inside your Child class, define new member variables called title and salary.   Initialize these variables accordingly.

        b.  Define the constructor to take the following inputs: name, age, gender, title, and salary.   Assign these inputs to Class member variables of the same name.  Note, you will need to specifically call the Parent constructor method inside the Child constructor, passing the appropriate inputs to the Parent constructor.

    C.  Instantiate an Employee object called George with the following inputs: name = “George”, age = 30, gender = “Male”, title = “Manager”, and salary = 50000.


    D.  Print out the object’s name, age, gender, title, and salary to the console window.  Your output should duplicate what is shown below.

CODE
class Person:
    # name, age, gender are member variables
    # __init__ is a method
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
        
class Employee(Person):
    def __init__(self, name, age, gender, title, salary):
        # super is to call parent's methods
        super().__init__(name, age, gender)
        self.title = title
        self.salary = salary
George = Employee('George', 30, "Male", "Manager", 50000)
print("George's info is: ")
print("Name:", George.name)
print("Age:",George.age)
print("Gender:",George.gender)
print("Title:",George.title)
print("Salary: ${}".format(George.salary))



OUTPUT
George's info is: 
Name: George
Age: 30
Gender: Male
Title: Manager
Salary: $50000





  


3.  Extending your answer from question #1, write the following python code to expand on the Car class.  Include the python code you developed when answering #1.

     A.	Add class “getter” methods to return the values for model, color, and MPG

     B.	Add class “setter” methods to change the existing values for model, color, and MPG.  The value to be used in the methods will be passed as an input argument.

     C.	Add class method that will calculate and return the number of miles per tank of gas, where the method is provided the size of the gas tank as an integer input

     D.	Below your Car class, create a new child class called mySportsCar that inherits from Car class.  Change the condition member variable to be "Used".  Make sure you call the Car class constructor with the appropriate inputs in the child class constructor.

     E.	Instantiate an object of the mySportsCar class.  Use the following attributes when instantiating your object: model=Porsche, color=Red, MPG=15

     F. Print out the car and sports car object’s model, color, MPG, number of miles driven per tank of gas (car tank size = 20, sports car tank size = 15) to the console window.  Your output should duplicate what is shown below.


CODE
class Car:
    # condition = "New" # class attribute
    def __init__(self, model, color, MPG):
        self.model = model  # instance variables (member variables)
        self.color = color
        self.MPG = MPG
        self.condition = "New"
    
    def get_model(self):
        return self.model
    def get_color(self):
        return self.color
    def get_MPG(self):
        return self.MPG
    
    def set_model(self, model):
        self.model = model
    def set_color(self, color):
        self.color = color
    def set_MPG(self, MPG):
        self.MPG = MPG
    
    def get_miles_per_tank(self, size):
        return self.MPG * size
    
class mySportsCar(Car):
    
    def __init__(self, model, color, MPG):
        super().__init__(model, color, MPG)
        self.condition = "Used"
        

my_car = Car("Corvette", "Black", 30)
print("My Car Info is")
print("Car Model:",my_car.model)
print("Car Color:", my_car.color)
print("Car Miles Per Gallon:", my_car.MPG)
print("Car Max Miles Per Tank:",my_car.get_miles_per_tank(20))
print("Car Condition:", my_car.condition)

print()

my_sports_car = mySportsCar("Porsche", "Red", 15)
print("My Sports Car Info is")
print("Sports Car Model:", my_sports_car.model)
print("Sports Car Color:", my_sports_car.color)
print("Sports Car Miles Per Gallon:" ,my_sports_car.MPG)
print("Sports Car Max Miles Per Tank:" ,my_sports_car.get_miles_per_tank(15))
print("Sports Car Condition:", my_sports_car.condition)




OUTPUT
My Car Info is
Car Model: Corvette
Car Color: Black
Car Miles Per Gallon: 30
Car Max Miles Per Tank: 600
Car Condition: New

My Sports Car Info is
Sports Car Model: Porsche
Sports Car Color: Red
Sports Car Miles Per Gallon: 15
Sports Car Max Miles Per Tank: 225
Sports Car Condition: Used






4. In Python a class can inherit from more than one class (Java does not allow this). The resulting class will have all the methods and attributes from the parent classes.  Do the following:

    •	Create a class called Person.  In the class, define variables for storing name, date of birth, place of birth, and gender attributes.  In the class, define the constructor method, as well as methods for returning current values of the class attributes.

    •	Create a class called Employee.  In the class, define variables for storing date of hire, department, and job title.  In the class, define the constructor method, as well as methods for returning current values of the class attributes.

    •	Create a class called Salaried that inherits from both Person and Employee classes.  In the class define variables for storing the salary and tax bracket.  In the class, define the constructor method, as well as methods for returning current values of the class attributes.

    •	Instantiate a Salaried object using the following attribute default values: Name: Lisa; Date of birth: January 1, 1980; Place of birth: New York, NY; Female, Date of hire: May 1, 2005, Department: Finance; Job Title: Manager; Salary: 100000; Tax Bracket: 29%.


CODE
class Person:
    def __init__(self, name, birth_date, birth_place, gender):
        self.name = name
        self.birth_date = birth_date
        self.birth_place = birth_place
        self.gender = gender
        
    def get_name(self):
        return self.name
    def get_birth_date(self):
        return self.birth_date
    def get_birth_place(self):
        return self.birth_place
    def get_gender(self):
        return self.gender
        
class Employee:
    def __init__(self, hire_date, department, job_title):
        self.hire_date = hire_date
        self.department = department
        self.job_title = job_title
        
    def get_hire_date(self):
        return self.hire_date
    def get_department(self):
        return self.department
    def get_job_title(self):
        return self.job_title
        
class Salaried(Person, Employee): # (Employee, Person)
    def __init__(self, name, birth_date, birth_place, gender, hire_date, department, job_title, salary, tax_bracket):
        Person.__init__(self, name, birth_date, birth_place, gender)
        Employee.__init__(self, hire_date, department, job_title)
        
        #super().__init__(name, birth_diate, birth_place, gender)
        #super(Person, self).__init__(hire_date, department, job_title)
        
        self.salary = salary
        self.tax_bracket = tax_bracket
        
my_salaried_object = Salaried("Lisa", "January 1, 1980", "New York, NY", "Female", "May 1, 2005", "Finance", "Manager", 100000, 29)

print("New Employee Info:")
print("Name:" ,my_salaried_object.name)
print("Date of Birth:" ,my_salaried_object.birth_date)
print("Place of Birth:" ,my_salaried_object.birth_place)
print("Gender:" ,my_salaried_object.gender)
print("Date of Hire:" ,my_salaried_object.hire_date)
print("Department:" ,my_salaried_object.department)
print("Title:" ,my_salaried_object.job_title)
print("Salary: ${}".format(my_salaried_object.salary))
print("Tax Bracket:" ,my_salaried_object.tax_bracket)



OUTPUT
New Employee Info:
Name: Lisa
Date of Birth: January 1, 1980
Place of Birth: New York, NY
Gender: Female
Date of Hire: May 1, 2005
Department: Finance
Title: Manager
Salary: $100000
Tax Bracket: 29



